defaultRules:
  create: true

## Configuration for alertmanager
alertmanager:
  enabled: true
  config:
    route:
      group_by: ['namespace']
      group_wait: 30s
      group_interval: 2m
      repeat_interval: 6h
      receiver: 'slack-notifications'
      routes:
      - receiver: 'slack-notifications'
        matchers:
          - alertname =~ "InfoInhibitor|Watchdog"
    receivers:
    - name: 'slack-notifications'
      slack_configs:
      - api_url: "https://hooks.slack.com/services/T08CXXXX" # Slack Webhook URL을 입력합니다.
        channel: '#alert-alertmanager-ubuns' # 메시지를 보낼 Slack 채널 이름
        send_resolved: true
        title: '{{ template "slack.default.title" . }}'
        text: "summary: {{ .CommonAnnotations.summary }}\ndescription: {{ .CommonAnnotations.description }}"

grafana:
  enabled: true
  defaultDashboardsTimezone: Asia/Seoul

  ingress:
    enabled: true
    ingressClassName: nginx
    annotations: 
      nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
      nginx.ingress.kubernetes.io/ssl-passthrough: "true"
      cert-manager.io/cluster-issuer: "selfsigned-issuer"
    hosts:
      - grafana.myweb.com
    tls:
      - hosts: 
        - grafana.myweb.com
        secretName: grafana.local-tls

  persistence:
    enabled: true
    type: sts
    storageClassName: "longhorn"
    accessModes:
      - ReadWriteOnce
    size: 1Gi

kubeProxy:
  enabled: true
  service:
    selector:
      k8s-app: kube-proxy

  serviceMonitor:
    selector:
     matchLabels:
       k8s-app: kube-proxy

prometheus:
  prometheusSpec:
    serviceMonitorSelectorNilUsesHelmValues: false

    retention: 5d
    retentionSize: "3GiB"

    ## Resource limits & requests
    ##
    resources: {}
    # requests:
    #   memory: 400Mi

    storageSpec:
     volumeClaimTemplate:
       spec:
         storageClassName: longhorn
         accessModes: ["ReadWriteOnce"]
         resources:
           requests:
             storage: 3Gi
